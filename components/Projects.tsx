"use client"

import { motion } from "framer-motion"
import { useInView } from "framer-motion"
import { useRef } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Github, ExternalLink, Server, Database, Zap, Users } from "lucide-react"

const Projects = () => {
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true, margin: "-100px" })

  const projects = [
  {
    name: "ERP System Optimization & Development",
    description:
      "Optimized in-house ERP system (XLPlat) by migrating TCL modules to Django. Implemented resume parsing, attendance, resignation workflows, billing, calendar, and email systems.",
    stack: ["Django", "PostgreSQL", "Tailwind CSS", "TCL", "Git", "JavaScript"],
    sourceCode: "https://github.com/aryam643",
    category: "Enterprise Backend",
    icon: Server,
    metrics: ["TCL to Django", "5+ modules", "Live Production"],
  },
  {
    name: "Live Polling System",
    description:
      "Full-stack live polling platform with real-time voting, live chat, and WebSocket updates. Built with Next.js, Node.js, and TypeScript with modern responsive UI.",
    stack: ["Next.js", "Node.js", "TypeScript", "WebSockets", "Tailwind CSS"],
    sourceCode: "https://github.com/aryam643/LivePolling",
    livePreview: "https://live-polliing-system.netlify.app/",
    category: "Real-time App",
    icon: Zap,
    metrics: ["Live chat", "Socket sync", "1000+ votes/sec"],
  },
  {
    name: "MBP-10 Orderbook from MBO Data",
    description:
      "High-frequency C++ module for reconstructing MBP-10 snapshots from Market-by-Order data streams with sub-microsecond latency for HFT applications.",
    stack: ["C++17", "DSA", "Performance Opt.", "STL"],
    sourceCode: "https://github.com/aryam643/Orderbook",
    category: "System Programming",
    icon: Database,
    metrics: ["55K ops/sec", "O(log n) time", "μs latency"],
  },
  {
    name: "Collaborative Whiteboard",
    description:
      "Real-time collaborative whiteboard using WebSockets. Supports drawing, room-based sessions, persistent history, and MongoDB storage.",
    stack: ["React", "Socket.io", "Node.js", "MongoDB", "Canvas API"],
    sourceCode: "https://github.com/aryam643/white_board",
    livePreview: "https://drive.google.com/file/d/1bE0B6OLID62vj6j7E5fObxuvIBXIQxWE/view?usp=sharing",
    category: "Real-time System",
    icon: Users,
    metrics: ["Canvas sync", "Room join", "Live drawing"],
  },
  {
    name: "E-commerce Backend API",
    description:
      "FastAPI-based backend with RESTful APIs for managing products and orders using MongoDB and async I/O. Features filtering, pagination, and autogenerated Swagger docs.",
    stack: ["FastAPI", "Python 3.11", "MongoDB", "Motor", "Pydantic v2"],
    sourceCode: "https://github.com/aryam643/_fastapi_",
    category: "Backend API",
    icon: Server,
    metrics: ["Async MongoDB", "Swagger Docs", "Order & Product APIs"],
  },
    {
    name: "My Workspace – Personal Productivity App",
    description:
      "A fullstack productivity app with AI-powered note summarization, task manager, auth, and modern UI. Built with Next.js, MongoDB, and Groq AI.",
    stack: ["Next.js", "MongoDB", "NextAuth", "Zustand", "Groq AI", "Tailwind CSS"],
    sourceCode: "https://github.com/aryam643/Take-Home-My-Workspace-A-Personal-Productivity-App.git",
    livePreview: "https://take-home-my-workspace-a-personal-p.vercel.app/",
    category: "AI-Integrated Fullstack",
    icon: Brain,
    metrics: ["Groq AI", "Auth + CRUD", "Modern UX"],
  },
]












  return (
    <section id="projects" className="py-20 bg-secondary/50">
      <div className="container mx-auto px-4">
        <motion.div
          ref={ref}
          initial={{ opacity: 0, y: 50 }}
          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <Badge variant="outline" className="mb-4 font-mono">
            {"<Projects />"}
          </Badge>
          <h2 className="text-4xl md:text-5xl font-bold mb-4 code-gradient">Backend Systems & APIs</h2>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            Scalable backend solutions, microservices architectures, and high-performance systems that power modern
            applications
          </p>
        </motion.div>

        <div className="grid lg:grid-cols-2 gap-8">
          {projects.map((project, index) => (
            <motion.div
              key={project.name}
              initial={{ opacity: 0, y: 50 }}
              animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
              transition={{ duration: 0.8, delay: index * 0.1 }}
            >
              <Card className="h-full hover:shadow-lg transition-all duration-300 group hover:-translate-y-2 border-primary/20">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="p-2 rounded-lg bg-primary/10">
                        <project.icon className="h-5 w-5 text-primary" />
                      </div>
                      <div>
                        <Badge variant="secondary" className="text-xs mb-2">
                          {project.category}
                        </Badge>
                        <CardTitle className="group-hover:text-primary transition-colors duration-300">
                          {project.name}
                        </CardTitle>
                      </div>
                    </div>
                  </div>
                  <CardDescription className="text-sm leading-relaxed">{project.description}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Performance Metrics */}
                  <div className="grid grid-cols-3 gap-2">
                    {project.metrics.map((metric, i) => (
                      <div key={i} className="text-center p-2 bg-secondary/50 rounded text-xs">
                        <span className="font-mono text-primary">{metric}</span>
                      </div>
                    ))}
                  </div>

                  {/* Tech Stack */}
                  <div className="flex flex-wrap gap-2">
                    {project.stack.slice(0, 5).map((tech) => (
                      <Badge key={tech} variant="outline" className="text-xs">
                        {tech}
                      </Badge>
                    ))}
                    {project.stack.length > 5 && (
                      <Badge variant="outline" className="text-xs">
                        +{project.stack.length - 5} more
                      </Badge>
                    )}
                  </div>

                  {/* Action Buttons */}
                  <div className="flex gap-2 pt-4">
                    <Button size="sm" variant="outline" asChild>
                      <a href={project.sourceCode} target="_blank" rel="noopener noreferrer">
                        <Github className="h-4 w-4 mr-2" />
                        Code
                      </a>
                    </Button>
                    {project.livePreview && (
                      <Button size="sm" asChild>
                        <a href={project.livePreview} target="_blank" rel="noopener noreferrer">
                          <ExternalLink className="h-4 w-4 mr-2" />
                          Live Demo
                        </a>
                      </Button>
                    )}
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  )
}

export default Projects
